[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pynvim-agents"
version = "0.1.0"
description = "Production-ready tools for programmatic Neovim control and automation"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["nvim", "neovim", "automation", "testing", "pynvim", "editor"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Text Editors",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pynvim>=0.5.2",
    "pytest-timeout>=2.4.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0", 
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
examples = [
    "jupyter>=1.1.1",
    "openai>=1.79.0",
]

[project.urls]
Homepage = "https://github.com/anthropics/pynvim-agents"
Documentation = "https://github.com/anthropics/pynvim-agents#readme"
Repository = "https://github.com/anthropics/pynvim-agents.git"
Issues = "https://github.com/anthropics/pynvim-agents/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pynvim_agents"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples", 
    "/docs",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--timeout=30",
    "-x",  # Stop on first failure
    "--disable-warnings",  # Reduce noise
    "--tb=short",  # Shorter tracebacks
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
target-version = ["py310"]
line-length = 88

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B018"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.16.1",
    "pytest>=8.4.1",
    "ruff>=0.12.0",
]
